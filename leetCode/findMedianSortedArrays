from typing import List

# 给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。
# 请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。
# 你可以假设 nums1 和 nums2 不会同时为空。
# 示例 1:
# nums1 = [1, 3]
# nums2 = [2]
# 则中位数是 2.0
# 示例 2:
# nums1 = [1, 2]
# nums2 = [3, 4]
# 则中位数是 (2 + 3)/2 = 2.5


def findMedianSortedArrays(nums1: List[int], nums2: List[int]) -> float:
    nums = (nums1 + nums2)
    nums.sort()
    if len(nums) == 1:
        return nums[0]
    else:
        if len(nums) % 2 == 0:
            s = len(nums) // 2
            return (nums[s] + nums[s - 1])/2.0
        else:
            return nums[len(nums) // 2]


a: List[int] = [1, 2]
b: List[int] = [3, 4]

print(findMedianSortedArrays(a, b))
